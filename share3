## フェーズ3：日常的なサイクルと少し発展

---

**スライド24：タイトル**

*   **タイトル：GitとGitHubを使いこなそう！ ～日常のサイクルと便利な機能～**
*   サブタイトル：毎日の作業をスムーズに、そしてちょっと高度な使い方へ
*   （イメージ：歯車が噛み合って回る、成長のステップ、カレンダーのアイコンなど）

---

**スライド25：おさらい：基本のサイクル**

*   **思い出そう！これが基本の流れだったね。**
    1.  **[ローカル]** ファイルを編集・作成
    2.  **[ローカル]** `git add <ファイル名>` または `git add .` (変更をステージング)
    3.  **[ローカル]** `git commit -m "分かりやすいメッセージ"` (変更を記録)
    4.  **[GitHubへ]** `git push` (ローカルの記録をGitHubに送信)
*   **ポイント：**
    *   `commit` はこまめに！ (作業の区切りが良いところで)
    *   `push` は1日の終わりや、キリの良いタイミングで。
*   （イメージ：サイクルの図を再掲、チェックマーク）

---

**スライド26：変更ってどうやって確認するんだっけ？ (`git status`, `git diff`)**

*   **`git status`**
    *   「今、どんなファイルが変更されてる？」
    *   「`add` したファイルはどれ？」
    *   「まだ `commit` してない変更はある？」
    *   Gitの状況を教えてくれるお助けコマンド！こまめに使おう。
*   **`git diff`**
    *   「具体的に、どこがどう変わったの？」
    *   ファイルの変更箇所を具体的に表示してくれる。
    *   `add` する前に使うと、前回の `commit` との差分が見れるよ。
*   （イメージ：`git status` と `git diff` の出力例キャプチャ、虫眼鏡アイコン）

---

**スライド27：コミットメッセージ、ちゃんと書いてる？**

*   **なぜコミットメッセージが大事なの？**
    *   未来の自分や、他の人が見たときに「このコミットは何の変更だったか」を理解するため。
    *   `git log` で履歴を見たときに、意味が分からないと困るよね。
*   **良いコミットメッセージの例：**
    *   「〇〇機能のバグを修正」
    *   「ホームページに新しい画像を追加」
    *   「誤字脱字を修正 (README.md)」
*   **悪いコミットメッセージの例：**
    *   「修正」
    *   「いろいろ変更」
    *   「wip」(Work In Progress - 作業途中という意味だが、これだけだと内容不明)
*   （イメージ：良い例と悪い例を並べる、分かりやすいメモと分かりにくいメモの比較）

---

**スライド28：うっかりミス！コミットを取り消したい (基本編)**

*   **直前のコミットを修正したい (`git commit --amend`)**
    *   「あ！コミットメッセージ間違えた！」
    *   「このファイルも一緒に入れるべきだった！」
    *   **注意：** GitHubに `push` する前に使おう！ (push済みの場合はもっと慎重な操作が必要)
    *   **使い方：**
        1.  (もし追加ファイルがあれば) `git add <追加ファイル>`
        2.  `git commit --amend`
        3.  エディタが開くので、コミットメッセージを修正して保存。
*   （イメージ：消しゴム、編集中のコミットメッセージ）
*   **注意点：** `push` 済みのコミットを安易に `amend` して `force push` すると、他の共同作業者がいる場合に混乱を招くので、最初はローカルで `push` 前のコミットに対して使うのが安全。

---

**スライド29：ファイルを過去の状態に戻したい (`git checkout`, `git restore`)**

*   **特定のファイルを、過去のコミットの状態に戻す**
    *   「このファイルだけ、昨日の状態に戻したいな…」
    *   **`git log <ファイル名>`** で、そのファイルの変更履歴とコミットID (ハッシュ) を確認。
    *   **コマンド (古いGitの場合)：`git checkout <コミットID> -- <ファイル名>`**
    *   **コマンド (新しいGitの場合)：`git restore --source=<コミットID> <ファイル名>`**
*   **ワーキングツリーの変更を取り消す (コミットしてない変更を元に戻す)**
    *   「編集したけど、やっぱりやーめた！」
    *   **コマンド：`git restore <ファイル名>`**
*   （イメージ：巻き戻しボタン、ファイルの過去バージョンが並んでいる図）
*   **補足：** `git checkout` は多機能なので、ファイル復元には `git restore` が推奨されるようになってきている。

---

**スライド30：GitHubでよく見るファイル：README.md**

*   **`README.md` って何？**
    *   リポジトリの「説明書」や「顔」となるファイル。
    *   そのプロジェクトが何なのか、どうやって使うのかなどを書く。
    *   GitHubでリポジトリを開くと、最初にこのファイルの内容が表示される。
*   **`.md` って何？**
    *   「Markdown (マークダウン)」という書き方で作られたファイル。
    *   簡単な記号で、見出しやリスト、太字などを表現できる。
    *   (例) `# 見出し`、`- リスト項目`、`**太字**`
*   **良いREADMEを書こう！**
    *   プロジェクト名、簡単な説明、使い方、インストール方法など。
*   （イメージ：GitHubのREADMEが表示されている画面キャプチャ、Markdownの簡単な記法例）

---

**スライド31：このファイルはGit管理したくないな… (`.gitignore`)**

*   **`.gitignore` (ドットgitignore) とは？**
    *   Gitの管理対象から「除外したい」ファイルやフォルダを指定するための設定ファイル。
*   **どんな時に使う？**
    *   自動生成されるファイル (コンパイル結果など)
    *   個人情報やパスワードが含まれる設定ファイル (絶対にコミットしない！)
    *   OSが自動で作るファイル (例: Macの `.DS_Store`)
*   **書き方：**
    *   1行に1つのファイル名やパターンを書く。
    *   (例) `secret_key.txt`, `*.log`, `node_modules/`
*   リポジトリのルートディレクトリ (一番上の階層) に `.gitignore` という名前で作成する。
*   （イメージ：ゴミ箱アイコン、無視されているファイルのリストのイメージ）

---

**スライド32：(余裕があれば) ちょっとだけブランチの話**

*   **ブランチって覚えてる？**
    *   作業の「分身」を作る機能だったね。
    *   `main` (または `master`) ブランチは常に安定した状態を保ちたい。
    *   新しい機能追加や、大きな変更を試すときは、別のブランチを作って作業するのが安全！
*   **簡単な流れ (復習＆発展)：**
    1.  `git branch feature-A` (新しいブランチ `feature-A` を作成)
    2.  `git checkout feature-A` (または `git switch feature-A`) (そのブランチに移動)
    3.  `feature-A` ブランチで作業 → `add` → `commit` (複数回)
    4.  作業が終わったら、`main` ブランチに移動： `git checkout main`
    5.  `main` ブランチに `feature-A` の変更を取り込む： `git merge feature-A`
    6.  (不要になったら) `git branch -d feature-A` (ブランチを削除)
    7.  `git push` (mainブランチの変更をGitHubへ。場合によってはブランチもpush)
*   （イメージ：木の幹から枝が分かれて、また合流する図）
*   **ポイント：** コンフリクト (衝突) が起きると少し複雑になるので、最初は簡単なマージから。

---

**スライド33：困ったときは？エラーが出たら？**

*   **エラーメッセージをよく読もう！**
    *   多くの場合、エラーメッセージの中に解決のヒントが書かれている。
    *   英語でも諦めずに、翻訳ツールなどを使ってみよう。
*   **Google先生に聞いてみよう！**
    *   エラーメッセージをそのままコピーして検索すると、解決策が見つかることが多い。
    *   (例) "git error: failed to push some refs to..."
*   **周りの人やコミュニティに質問しよう！**
    *   何をしたか、どんなエラーが出たか、何を試したかを具体的に伝えるのがコツ。
*   **GitのGUIツールも便利**
    *   SourceTree, GitHub Desktop, VS CodeのGit連携機能など。
    *   コマンドと合わせて使うと理解が深まることも。
*   （イメージ：検索窓、ヘルプアイコン、質問している人）

---

**スライド34：フェーズ3のまとめ**

*   **日常のサイクルを確実に！**
    *   編集 → `add` → `commit` → `push`
    *   `status`, `diff` で変更内容を確認。
    *   分かりやすいコミットメッセージを心がける。
*   **便利な機能を少しずつ活用！**
    *   `commit --amend` で直前のコミットを修正 (push前)。
    *   `checkout` / `restore` でファイルを過去の状態に戻す。
    *   `README.md` でプロジェクトの説明を充実させる。
    *   `.gitignore` で不要なファイルを管理対象外に。
    *   ブランチを使って安全に作業を進める (基本)。
*   **エラーを恐れず、解決する力をつけよう！**
*   （イメージ：成長していくキャラクター、ツールボックスに新しい道具が増えるイメージ）

---

**スライド作成のポイント（フェーズ3）：**

*   **復習と応用のバランス：** 基本的なサイクルの重要性を再確認しつつ、新しい概念やコマンドを紹介。
*   **具体的なユースケース：**「こんな時に便利」というのを伝える。
*   **注意点も伝える：** 特にコミットの修正やブランチ操作は、誤ると問題が大きくなる可能性があるので、安全な使い方を強調する。
*   **自走力を促す：** エラー解決の方法など、自分で学んでいくためのヒントを入れる。
*   **焦らせない：**「余裕があれば」という言葉を使い、全てを一度にマスターする必要はないことを示唆する。

このフェーズ3で、GitとGitHubをより実践的に、そして少し自信を持って使えるようになることを目指します。
